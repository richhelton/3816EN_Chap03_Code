//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using NServiceBus;
using PaymentEngine.Internal.Commands.Paying;
using PaymentEngine.Contracts.Payments;
using PaymentEngine.Internal.Messages.Paying;
using NServiceBus.Saga;


namespace PaymentEngine.Paying
{
    public partial class PaymentAcceptedHandler : Saga<PaymentAcceptedHandlerSagaData>, IPaymentAcceptedHandler, ServiceMatrix.Shared.INServiceBusComponent, IAmStartedByMessages<PaymentAccepted>, IHandleMessages<PaymentNotificationResponse>
    {
		
		public void Handle(PaymentAccepted message)
		{
			// Store message in Saga Data for later use
			this.Data.PaymentAccepted = message;
			// Handle message on partial class
			this.HandleImplementation(message);

			// Check if Saga is Completed 
			CheckIfAllMessagesReceived();
		}

		partial void HandleImplementation(PaymentAccepted message);

        public void Send(PaymentNotification message)
        {
            ConfigurePaymentNotification(message);
            Bus.Send(message);
        }

        partial void ConfigurePaymentNotification(PaymentNotification message);

        public void Handle(PaymentNotificationResponse message)
        {
            // Store message in Saga Data for later use
            this.Data.PaymentNotificationResponse = message;

            // Handle message on partial class
            this.HandleImplementation(message);

            // Check if Saga is Completed 
            CheckIfAllMessagesReceived();
        }

        partial void HandleImplementation(PaymentNotificationResponse message);

        public void CheckIfAllMessagesReceived()
        {
            if (this.Data.PaymentAccepted != null && this.Data.PaymentNotificationResponse != null)
            {
                AllMessagesReceived();
            }
        }

        partial void AllMessagesReceived();
     }

     public partial class PaymentAcceptedHandlerSagaData : IContainSagaData
     {
           public virtual Guid Id { get; set; }
           public virtual string Originator { get; set; }
           public virtual string OriginalMessageId { get; set; }

           public virtual PaymentAccepted PaymentAccepted { get; set; }
           public virtual PaymentNotificationResponse PaymentNotificationResponse { get; set; }

    }

	
	public partial interface IPaymentAcceptedHandler
    {
        
        void Send(PaymentNotification message);

	}

	
}
